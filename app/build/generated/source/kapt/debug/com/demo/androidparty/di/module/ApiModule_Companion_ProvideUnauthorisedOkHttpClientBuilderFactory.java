// Generated by Dagger (https://dagger.dev).
package com.demo.androidparty.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_Companion_ProvideUnauthorisedOkHttpClientBuilderFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  public ApiModule_Companion_ProvideUnauthorisedOkHttpClientBuilderFactory(
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideUnauthorisedOkHttpClientBuilder(interceptorProvider.get());
  }

  public static ApiModule_Companion_ProvideUnauthorisedOkHttpClientBuilderFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    return new ApiModule_Companion_ProvideUnauthorisedOkHttpClientBuilderFactory(interceptorProvider);
  }

  public static OkHttpClient provideUnauthorisedOkHttpClientBuilder(
      HttpLoggingInterceptor interceptor) {
    return Preconditions.checkNotNull(ApiModule.Companion.provideUnauthorisedOkHttpClientBuilder(interceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
