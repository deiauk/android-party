// Generated by Dagger (https://dagger.dev).
package com.demo.androidparty.di;

import com.demo.androidparty.base.ViewModelFactory;
import com.demo.androidparty.ui.main.MainActivity;
import com.demo.androidparty.ui.main.MainViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivityModule_Companion_ProvideMainViewModel$app_debugFactory implements Factory<MainViewModel> {
  private final Provider<MainActivity> targetProvider;

  private final Provider<ViewModelFactory> factoryProvider;

  public MainActivityModule_Companion_ProvideMainViewModel$app_debugFactory(
      Provider<MainActivity> targetProvider, Provider<ViewModelFactory> factoryProvider) {
    this.targetProvider = targetProvider;
    this.factoryProvider = factoryProvider;
  }

  @Override
  public MainViewModel get() {
    return provideMainViewModel$app_debug(targetProvider.get(), factoryProvider.get());
  }

  public static MainActivityModule_Companion_ProvideMainViewModel$app_debugFactory create(
      Provider<MainActivity> targetProvider, Provider<ViewModelFactory> factoryProvider) {
    return new MainActivityModule_Companion_ProvideMainViewModel$app_debugFactory(targetProvider, factoryProvider);
  }

  public static MainViewModel provideMainViewModel$app_debug(MainActivity target,
      ViewModelFactory factory) {
    return Preconditions.checkNotNull(MainActivityModule.Companion.provideMainViewModel$app_debug(target, factory), "Cannot return null from a non-@Nullable @Provides method");
  }
}
