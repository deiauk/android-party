// Generated by Dagger (https://dagger.dev).
package com.demo.androidparty.di.module;

import com.demo.androidparty.network.ApiService;
import com.demo.androidparty.storage.preferences.AppPreferences;
import com.demo.androidparty.ui.login.LoginModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginFragmentModule_ProvideLoginModel$app_debugFactory implements Factory<LoginModel> {
  private final Provider<CoroutineDispatcher> dispatcherProvider;

  private final Provider<ApiService> apiServiceProvider;

  private final Provider<AppPreferences> preferencesProvider;

  public LoginFragmentModule_ProvideLoginModel$app_debugFactory(
      Provider<CoroutineDispatcher> dispatcherProvider, Provider<ApiService> apiServiceProvider,
      Provider<AppPreferences> preferencesProvider) {
    this.dispatcherProvider = dispatcherProvider;
    this.apiServiceProvider = apiServiceProvider;
    this.preferencesProvider = preferencesProvider;
  }

  @Override
  public LoginModel get() {
    return provideLoginModel$app_debug(dispatcherProvider.get(), apiServiceProvider.get(), preferencesProvider.get());
  }

  public static LoginFragmentModule_ProvideLoginModel$app_debugFactory create(
      Provider<CoroutineDispatcher> dispatcherProvider, Provider<ApiService> apiServiceProvider,
      Provider<AppPreferences> preferencesProvider) {
    return new LoginFragmentModule_ProvideLoginModel$app_debugFactory(dispatcherProvider, apiServiceProvider, preferencesProvider);
  }

  public static LoginModel provideLoginModel$app_debug(CoroutineDispatcher dispatcher,
      ApiService apiService, AppPreferences preferences) {
    return Preconditions.checkNotNull(LoginFragmentModule.provideLoginModel$app_debug(dispatcher, apiService, preferences), "Cannot return null from a non-@Nullable @Provides method");
  }
}
