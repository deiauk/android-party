// Generated by Dagger (https://dagger.dev).
package com.demo.androidparty.di;

import androidx.lifecycle.ViewModel;
import com.demo.androidparty.ui.main.MainModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivityModule_ProvideMainViewModelFactory$app_debugFactory implements Factory<ViewModel> {
  private final Provider<MainModel> modelProvider;

  public MainActivityModule_ProvideMainViewModelFactory$app_debugFactory(
      Provider<MainModel> modelProvider) {
    this.modelProvider = modelProvider;
  }

  @Override
  public ViewModel get() {
    return provideMainViewModelFactory$app_debug(modelProvider.get());
  }

  public static MainActivityModule_ProvideMainViewModelFactory$app_debugFactory create(
      Provider<MainModel> modelProvider) {
    return new MainActivityModule_ProvideMainViewModelFactory$app_debugFactory(modelProvider);
  }

  public static ViewModel provideMainViewModelFactory$app_debug(MainModel model) {
    return Preconditions.checkNotNull(MainActivityModule.provideMainViewModelFactory$app_debug(model), "Cannot return null from a non-@Nullable @Provides method");
  }
}
