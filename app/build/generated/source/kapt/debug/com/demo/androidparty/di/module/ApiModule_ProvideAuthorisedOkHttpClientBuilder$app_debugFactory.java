// Generated by Dagger (https://dagger.dev).
package com.demo.androidparty.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideAuthorisedOkHttpClientBuilder$app_debugFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  private final Provider<Interceptor> authInterceptorProvider;

  public ApiModule_ProvideAuthorisedOkHttpClientBuilder$app_debugFactory(
      Provider<HttpLoggingInterceptor> interceptorProvider,
      Provider<Interceptor> authInterceptorProvider) {
    this.interceptorProvider = interceptorProvider;
    this.authInterceptorProvider = authInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideAuthorisedOkHttpClientBuilder$app_debug(interceptorProvider.get(), authInterceptorProvider.get());
  }

  public static ApiModule_ProvideAuthorisedOkHttpClientBuilder$app_debugFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider,
      Provider<Interceptor> authInterceptorProvider) {
    return new ApiModule_ProvideAuthorisedOkHttpClientBuilder$app_debugFactory(interceptorProvider, authInterceptorProvider);
  }

  public static OkHttpClient provideAuthorisedOkHttpClientBuilder$app_debug(
      HttpLoggingInterceptor interceptor, Interceptor authInterceptor) {
    return Preconditions.checkNotNull(ApiModule.provideAuthorisedOkHttpClientBuilder$app_debug(interceptor, authInterceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
